plugins {

    id 'eclipse'
    id 'idea'

    id 'groovy'
    id 'war'
    id 'application'

    id 'org.grails.grails-web'
    id 'org.grails.grails-gsp'

    id 'com.github.erdi.webdriver-binaries'
    id 'com.github.node-gradle.node'
}

group = 'io.github.matrei'

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://repo.grails.org/grails/core' }
}

configurations {
    configureEach {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'org.seleniumhq.selenium') {
                details.useVersion "$seleniumVersion"
            }
            if (details.requested.group == 'org.gebish') {
                details.useVersion "$gebVersion"
            }
        }
    }
}

// This is used for testing with local copy of the Grails Inertia Plugin
// (comment out the dependency in the dependencies block)
// Also see section in settings.gradle
/*
grails {
    plugins {
        implementation project(':grails-inertia-plugin')
    }
}
*/
dependencies {

    implementation 'org.grails:grails-core'
    implementation 'org.grails:grails-logging'
    implementation 'org.grails:grails-plugin-databinding'
    implementation 'org.grails:grails-plugin-i18n'
    implementation 'org.grails:grails-plugin-interceptors'
    implementation 'org.grails:grails-plugin-rest'
    implementation 'org.grails:grails-plugin-services'
    implementation 'org.grails:grails-plugin-url-mappings'
    implementation 'org.grails:grails-web-boot'

    implementation 'org.grails.plugins:gsp'
    implementation 'org.grails.plugins:views-json'
    implementation 'org.grails.plugins:hibernate5'
    implementation 'org.grails.plugins:async'
    implementation 'org.grails.plugins:spring-security-core:6.1.0'
    implementation 'org.grails.plugins:gorm-logical-delete:2.0.0.M2'
    implementation 'io.github.matrei:grails-inertia-plugin:2.1.0'
    //implementation project(':grails-inertia-plugin')

    implementation 'org.hibernate:hibernate-core:5.6.15.Final'

    implementation 'org.springframework.boot:spring-boot-autoconfigure'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    implementation 'org.springframework.boot:spring-boot-starter-tomcat'

    implementation 'net.datafaker:datafaker:2.0.2'
    implementation 'dev.nicklasw:squiggly-filter-jackson:2.0.1'
    implementation 'com.drewnoakes:metadata-extractor:2.18.0'
    implementation 'org.imgscalr:imgscalr-lib:4.2'

    compileOnly 'io.micronaut:micronaut-inject-groovy'

    console 'org.grails:grails-console'

    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.zaxxer:HikariCP:5.1.0'

    testImplementation 'io.micronaut:micronaut-inject-groovy'
    testImplementation 'org.grails:grails-gorm-testing-support'
    testImplementation 'org.grails:grails-web-testing-support'
    testImplementation 'org.spockframework:spock-core'
    testImplementation 'io.micronaut:micronaut-http-client'

    integrationTestImplementation 'org.grails.plugins:geb'

    integrationTestRuntimeOnly 'org.seleniumhq.selenium:selenium-remote-driver'
    integrationTestRuntimeOnly 'org.seleniumhq.selenium:selenium-api'
    integrationTestRuntimeOnly 'org.seleniumhq.selenium:selenium-support'
    integrationTestRuntimeOnly 'org.seleniumhq.selenium:selenium-chrome-driver'
    integrationTestRuntimeOnly 'org.seleniumhq.selenium:selenium-firefox-driver'
}

application {
    mainClass.set 'pingcrm.Application'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of 17
    }
}

tasks.withType(Test).configureEach {

    useJUnitPlatform()

    systemProperty 'geb.env', System.getProperty('geb.env')
    systemProperty 'geb.build.reportsDir', reporting.file('geb/integrationTest')
    systemProperty 'webdriver.chrome.driver', "${System.getenv('CHROMEWEBDRIVER')}/chromedriver"
    systemProperty 'webdriver.gecko.driver', "${System.getenv('GECKOWEBDRIVER')}/geckodriver"
}

tasks.withType(War).configureEach { War war ->
    war.dependsOn compileGroovyPages
}
webdriverBinaries {
    chromedriver {
        version = '110.0.5481.77'
        fallbackTo32Bit = true
    }
    geckodriver = '0.32.2'
    edgedriver = '110.0.1587.57'
}


node {
    download = true
}

tasks.register('viteBuild', NpmTask) {
    dependsOn 'npmInstall'
    group = 'build'
    description = 'Build the client bundle'
    args = ['run', 'build']
}

tasks.register('copyNodeModulesForSsr', Copy) {
    dependsOn 'npmInstall'
    group = 'build'
    description = 'Copy node_modules for SSR'
    from 'node_modules'
    into 'build/resources/main/node_modules'
}

processResources.dependsOn 'viteBuild', 'copyNodeModulesForSsr'