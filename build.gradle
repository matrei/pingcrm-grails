import com.github.gradle.node.npm.task.NpmTask

plugins {
    id 'application'
    id 'groovy'
    id 'war'
    id 'com.github.erdi.webdriver-binaries'
    id 'com.github.node-gradle.node'
    id 'com.gorylenko.gradle-git-properties'
}

// Override versions in BOMs of transitive dependencies
ext.set('netty.version', libs.versions.netty.get())
ext.set('spring.version', libs.versions.spring.asProvider().get())
ext.set('tomcat.version', libs.versions.tomcat.get())

group = 'io.github.matrei'
ext.set('grailsVersion', libs.versions.grails.asProvider().get())

// These plugins need to be applied after the grailsVersion property is set
apply plugin: 'org.grails.grails-web'
apply plugin: 'org.grails.grails-gsp'

repositories {
    mavenCentral()
    maven { url = 'https://repo.grails.org/grails/core' }
}

// This is used for testing with local copy of the Grails Inertia Plugin
// (comment out the dependency in the dependencies block)
// Also see section in settings.gradle
/*
grails {
    plugins {
        implementation project(':grails-inertia-plugin')
    }
}
*/

configurations.configureEach {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.codehaus.groovy') {
            String groovyVersion = findProperty('groovyVersion') ?: libs.versions.groovy.get()
            details.useVersion(groovyVersion)
        }
    }
}

dependencies {

    implementation libs.grails.core
    implementation libs.grails.interceptors
    implementation libs.grails.webCommon
    implementation libs.grails.webDatabinding

    implementation libs.grailsEvents
    implementation libs.grailsGsp
    implementation libs.grailsGormLogicalDelete
    implementation libs.grailsInertia
    implementation libs.grailsSpringSecurity.core
    //implementation project(':grails-inertia-plugin')

    implementation libs.bundles.springSecurity
    implementation libs.datafaker
    implementation libs.imgscalr
    implementation libs.metadataExtractor
    implementation libs.squiggly

    runtimeOnly libs.grails.i18n
    runtimeOnly libs.grails.services
    runtimeOnly libs.grails.urlmappings
    runtimeOnly libs.gorm.hibernate5
    runtimeOnly libs.grailsCsrf
    runtimeOnly libs.springBoot.autoconfigure
    runtimeOnly libs.springBoot.starterLogging
    runtimeOnly libs.springBoot.starterTomcat
    runtimeOnly libs.h2database
    runtimeOnly libs.hikari

    compileOnly libs.micronaut.injectGroovy
    compileOnly libs.grailsViews.json // Used for compiling json views
    compileOnly libs.slf4j.nop // Get rid of warning about missing slf4j implementation during GSP compile tasks

    testImplementation libs.micronaut.httpClient
    testImplementation libs.micronaut.injectGroovy
    testImplementation libs.bundles.grailsTestingSupport
    testImplementation libs.spock.core
    testImplementation libs.groovy.test

    integrationTestImplementation testFixtures(libs.grailsGeb)
}

application {
    mainClass = 'pingcrm.Application'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
}

tasks.withType(Test).configureEach {

    useJUnitPlatform()

    testLogging {
        events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
    }

    reports.html.required = false
    reports.junitXml.required = false
}

node {
    download = true
}

tasks.register('viteBuild', NpmTask) {
    group = 'build'
    description = 'Build the client bundle'

    inputs.dir(layout.projectDirectory.dir('node_modules'))
    inputs.dir(layout.projectDirectory.dir('src/main/javascript'))
    inputs.files(layout.projectDirectory.files('package.json', 'vite.config.js', 'tailwind.config.js', 'postcss.config.js', 'babel.config.js', 'jsconfig.json'))

    outputs.dir(layout.projectDirectory.dir('src/main/resources/public/dist'))

    it.args = ['run', 'build']

    dependsOn 'npmInstall'
}

tasks.register('copyNodeModulesForSsr', Copy) {
    group = 'build'
    description = 'Copy node_modules for SSR'

    from layout.projectDirectory.dir('node_modules')
    into layout.buildDirectory.dir('resources/main/node_modules')

    dependsOn 'npmInstall'
}

tasks.named('processResources') {
    dependsOn 'viteBuild', 'copyNodeModulesForSsr'
}